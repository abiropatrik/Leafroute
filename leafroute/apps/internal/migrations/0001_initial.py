# Generated by Django 5.2.5 on 2025-09-26 11:19

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('city_id', models.AutoField(db_column='CityID', primary_key=True, serialize=False)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('continent', models.CharField(blank=True, max_length=255, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('has_airport', models.BooleanField(blank=True, null=True)),
                ('has_harbour', models.BooleanField(blank=True, null=True)),
                ('longitude_coordinate', models.FloatField(blank=True, null=True)),
                ('latitude_coordinate', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Cities',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('product_id', models.AutoField(db_column='ProductID', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('unit_price', models.FloatField(blank=True, null=True)),
                ('size', models.FloatField(blank=True, null=True)),
                ('is_alive', models.BooleanField(blank=True, null=True)),
                ('is_liquid', models.BooleanField(blank=True, null=True)),
                ('is_hazardous', models.BooleanField(blank=True, null=True)),
                ('is_time_sensitive', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Products',
            },
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('route_id', models.AutoField(db_column='RouteID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'Routes',
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('address_id', models.AutoField(db_column='AddressID', primary_key=True, serialize=False)),
                ('street', models.CharField(blank=True, max_length=255, null=True)),
                ('house_number', models.CharField(blank=True, max_length=255, null=True)),
                ('institution_name', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.ForeignKey(db_column='CityID', on_delete=django.db.models.deletion.CASCADE, to='internal.city')),
            ],
            options={
                'db_table': 'Addresses',
            },
        ),
        migrations.CreateModel(
            name='RoutePart',
            fields=[
                ('route_part_id', models.AutoField(db_column='RoutePartID', primary_key=True, serialize=False)),
                ('distance', models.FloatField()),
                ('transport_mode', models.CharField(max_length=255)),
                ('route_cost', models.FloatField()),
                ('end_address', models.ForeignKey(db_column='EndAddressID', on_delete=django.db.models.deletion.CASCADE, related_name='routepart_end', to='internal.address')),
                ('route', models.ForeignKey(db_column='RouteID', on_delete=django.db.models.deletion.CASCADE, to='internal.route')),
                ('start_address', models.ForeignKey(db_column='StartAddressID', on_delete=django.db.models.deletion.CASCADE, related_name='routepart_start', to='internal.address')),
            ],
            options={
                'db_table': 'RouteParts',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_full_name_displayed', models.BooleanField(default=True)),
                ('email', models.CharField(blank=True, max_length=255, null=True)),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('job', models.CharField(blank=True, max_length=255, null=True)),
                ('rights', models.CharField(blank=True, max_length=255, null=True)),
                ('hiring_date', models.DateField(blank=True, null=True)),
                ('co2_saved', models.FloatField(blank=True, null=True)),
                ('salary', models.FloatField(blank=True, null=True)),
                ('address', models.ForeignKey(blank=True, db_column='AddressID', null=True, on_delete=django.db.models.deletion.CASCADE, to='internal.address')),
                ('user', models.OneToOneField(db_column='UserID', on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Users',
                'permissions': [('admin_tasks', 'Is able to proceed with admin related tasks'), ('organiser_tasks', 'Is able to proceed with tasks related to organisers'), ('driver_tasks', 'Is able to proceed with tasks related to drivers'), ('warehouseman_tasks', 'Is able to proceed with tasks related to warehousemen'), ('manager_tasks', 'Is able to proceed with tasks related to managers')],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('order_id', models.AutoField(db_column='OrderID', primary_key=True, serialize=False)),
                ('quantity', models.IntegerField()),
                ('order_date', models.DateField(blank=True, null=True)),
                ('expected_fullfillment_date', models.DateField(blank=True, null=True)),
                ('fulfillment_date', models.DateField(blank=True, null=True)),
                ('order_status', models.CharField(blank=True, max_length=255, null=True)),
                ('expected_co2_emission', models.FloatField(blank=True, null=True)),
                ('co2_emmission', models.FloatField(blank=True, null=True)),
                ('cost', models.FloatField(blank=True, null=True)),
                ('product', models.ForeignKey(db_column='ProductID', on_delete=django.db.models.deletion.CASCADE, to='internal.product')),
                ('route', models.ForeignKey(db_column='RouteID', on_delete=django.db.models.deletion.CASCADE, to='internal.route')),
                ('user', models.ForeignKey(db_column='UserID', on_delete=django.db.models.deletion.CASCADE, to='internal.userprofile')),
            ],
            options={
                'db_table': 'Orders',
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('vehicle_id', models.AutoField(db_column='VehicleID', primary_key=True, serialize=False)),
                ('brand', models.CharField(blank=True, max_length=255, null=True)),
                ('model', models.CharField(blank=True, max_length=255, null=True)),
                ('production_year', models.IntegerField(blank=True, null=True)),
                ('type', models.CharField(blank=True, max_length=255, null=True)),
                ('fuel_type', models.CharField(blank=True, max_length=255, null=True)),
                ('consumption', models.FloatField(blank=True, null=True)),
                ('full_capacity', models.FloatField(blank=True, null=True)),
                ('free_capacity', models.FloatField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=255, null=True)),
                ('avg_distance_per_hour', models.FloatField(blank=True, null=True)),
                ('fuel_cost', models.FloatField(blank=True, null=True)),
                ('address', models.ForeignKey(blank=True, db_column='AddressID', null=True, on_delete=django.db.models.deletion.CASCADE, to='internal.address')),
            ],
            options={
                'db_table': 'Vehicles',
            },
        ),
        migrations.CreateModel(
            name='Shipment',
            fields=[
                ('shipment_id', models.AutoField(db_column='ShipmentID', primary_key=True, serialize=False)),
                ('shipment_start_date', models.DateTimeField(blank=True, null=True)),
                ('shipment_end_date', models.DateTimeField(blank=True, null=True)),
                ('duration', models.IntegerField(blank=True, null=True)),
                ('quantity_transported', models.IntegerField(blank=True, null=True)),
                ('fuel_consumed', models.FloatField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=255, null=True)),
                ('co2_emission', models.FloatField(blank=True, null=True)),
                ('transport_cost', models.FloatField(blank=True, null=True)),
                ('order', models.ForeignKey(db_column='OrderID', on_delete=django.db.models.deletion.CASCADE, to='internal.order')),
                ('product', models.ForeignKey(db_column='ProductID', on_delete=django.db.models.deletion.CASCADE, to='internal.product')),
                ('route_part', models.ForeignKey(db_column='RoutePartsID', on_delete=django.db.models.deletion.CASCADE, to='internal.routepart')),
                ('vehicle', models.ForeignKey(db_column='VehicleID', on_delete=django.db.models.deletion.CASCADE, to='internal.vehicle')),
            ],
            options={
                'db_table': 'Shipments',
            },
        ),
        migrations.CreateModel(
            name='Warehouse',
            fields=[
                ('warehouse_id', models.AutoField(db_column='WarehouseID', primary_key=True, serialize=False)),
                ('capacity', models.IntegerField(blank=True, null=True)),
                ('fullness', models.IntegerField(blank=True, null=True)),
                ('contact_email', models.CharField(blank=True, max_length=255, null=True)),
                ('address', models.ForeignKey(db_column='AddressID', on_delete=django.db.models.deletion.CASCADE, to='internal.address')),
            ],
            options={
                'db_table': 'Warehouses',
            },
        ),
        migrations.CreateModel(
            name='WarehouseConnection',
            fields=[
                ('warehouse_connection_id', models.AutoField(db_column='WarehouseConnectionID', primary_key=True, serialize=False)),
                ('is_in_different_country', models.BooleanField(blank=True, null=True)),
                ('is_in_different_continent', models.BooleanField(blank=True, null=True)),
                ('warehouse1', models.ForeignKey(db_column='Warehouse1', on_delete=django.db.models.deletion.CASCADE, related_name='connection_warehouse1', to='internal.warehouse')),
                ('warehouse2', models.ForeignKey(db_column='Warehouse2', on_delete=django.db.models.deletion.CASCADE, related_name='connection_warehouse2', to='internal.warehouse')),
            ],
            options={
                'db_table': 'WarehouseConnections',
            },
        ),
        migrations.AddField(
            model_name='route',
            name='warehouse_connection',
            field=models.ForeignKey(db_column='WarehouseConnectionID', on_delete=django.db.models.deletion.CASCADE, to='internal.warehouseconnection'),
        ),
        migrations.AddField(
            model_name='order',
            name='warehouse_connection',
            field=models.ForeignKey(db_column='WarehouseConnectionID', on_delete=django.db.models.deletion.CASCADE, to='internal.warehouseconnection'),
        ),
        migrations.CreateModel(
            name='WorkSchedule',
            fields=[
                ('schedule_id', models.AutoField(db_column='Schedule_id', primary_key=True, serialize=False)),
                ('work_day', models.DateField(blank=True, null=True)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('user', models.ForeignKey(db_column='User_id', on_delete=django.db.models.deletion.CASCADE, to='internal.userprofile')),
            ],
            options={
                'db_table': 'WorkSchedules',
            },
        ),
        migrations.CreateModel(
            name='UserShipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shipment', models.ForeignKey(db_column='ShipmentID', on_delete=django.db.models.deletion.CASCADE, to='internal.shipment')),
                ('user', models.ForeignKey(db_column='UserID', on_delete=django.db.models.deletion.CASCADE, to='internal.userprofile')),
            ],
            options={
                'db_table': 'UserShipments',
                'unique_together': {('user', 'shipment')},
            },
        ),
        migrations.CreateModel(
            name='WarehouseProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('free_stock', models.IntegerField(blank=True, null=True)),
                ('reserved_stock', models.IntegerField(blank=True, null=True)),
                ('product', models.ForeignKey(db_column='PRODUCTID', on_delete=django.db.models.deletion.CASCADE, to='internal.product')),
                ('warehouse', models.ForeignKey(db_column='WAREHOUSEID', on_delete=django.db.models.deletion.CASCADE, to='internal.warehouse')),
            ],
            options={
                'db_table': 'WarehouseProducts',
                'unique_together': {('product', 'warehouse')},
            },
        ),
    ]
